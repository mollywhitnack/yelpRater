"use strict";var app=angular.module("myApp",["ui.router","satellizer","ngFileUpload"]);app.config(["$authProvider",function(e){e.loginUrl="api/users/login",e.signupUrl="api/users/signup",e.facebook({clientId:"255060128209165",url:"/api/users/facebook"})}]),app.config(["$stateProvider","$urlRouterProvider",function(e,o){e.state("home",{url:"/",templateUrl:"/html/home.html"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl"}).state("register",{url:"/register",templateUrl:"/html/register.html",controller:"registerCtrl"}).state("profile",{url:"/profile/:userId",templateUrl:"/html/profile.html",controller:"profileCtrl",resolve:{Profile:["User",function(e){return e.profile()}],ProfileByID:["User","$stateParams",function(e,o){return e.getProfile(o.userId)}]}}).state("users",{url:"/users",templateUrl:"/html/users.html",controller:"usersCtrl"}).state("business",{url:"/business",templateUrl:"/html/business.html",controller:"businessCtrl",resolve:{Profile:["User",function(e){return e.profile()}]}}).state("showBusiness",{url:"/business/:businessId",templateUrl:"html/showbusiness.html",controller:"showbusinessCtrl"}),o.otherwise("/")}]);var app=angular.module("myApp");app.controller("businessCtrl",["$scope","User","$rootScope","Business","Profile",function(e,o,n,s,t){console.log("businessCtrl"),e.businesses=[],console.log("Profile:",t);var r=t.favorites;e.searchBusiness=function(){console.log("$scope.newItem.searchParams",e.newItem.searchParams),s.searchYelp(e.newItem.searchParams).then(function(o){console.log("res from search businsess:",o);for(var n=0;n<r.length;n++)console.log(o.id," vs ",r[n]),o.id===r[n]&&(e.toggleFave=!0);e.businesses.push(o)})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.favorite=function(n){e.toggleFave=!e.toggleFave,console.log("$scope.businesses[index].id",e.businesses[n].id),o.addFavoriteToUser(t._id,e.businesses[n].id).then(s.addFavorite(e.businesses[n],t._id)).then(function(e){console.log("res:",e)})["catch"](function(e){console.log("err in businessCtrl: ",e)}),console.log("$scope.businesses[index]:",e.businesses[n].id)},e.unFavorite=function(n){e.toggleFave=!e.toggleFave,console.log("$scope.businesses[index].id",e.businesses[n].id),o.removeFavoritefromUser(t._id,e.businesses[n].id).then(function(e){console.log("res:",e)})["catch"](function(e){console.log("err in businessCtrl: ",e)}),console.log("$scope.businesses[index]:",e.businesses[n].id)}}]);var app=angular.module("myApp");app.controller("imageCtrl",["$scope","Upload","Profile","$rootScope",function(e,o,n,s){console.log("image ctrl"),s.currentUser=n,e.submit=function(){console.log("submit"),console.log("$scope.file:",e.file),o.upload({url:"/api/images",data:{photo:e.file,user:s.currentUser._id}}).then(function(o){console.log("res: ",o),e.savedImage=o.data})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("loginCtrl",["$scope","$state","$auth","$rootScope",function(e,o,n,s){console.log("loginCtrl!"),e.login=function(){n.login(e.user).then(function(e){console.log("res: ",e),o.go("profile")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$state","$auth","$rootScope",function(e,o,n,s){console.log("mainCtrl!"),s.currentUser,e.isAuthenticated=function(){return n.isAuthenticated()},e.logout=function(){n.logout(),o.go("home")},e.authenticate=function(e){n.authenticate(e).then(function(e){o.go("home")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("profileCtrl",["$scope","Profile","ProfileByID","$state","User","$rootScope","WallPost",function(e,o,n,s,t,r,l){console.log("profileCtrl!"),r.currentUser=o,e.user=n||o,l.getWallPosts(e.user._id).then(function(o){e.userWallposts=o}),console.log("user:",e.user),console.log("curruser:",r.currentUser),e.showdisplayNameForm=function(){console.log("show form"),e.displayNameForm=!0},e.updatedisplayName=function(){e.displayNameForm=!1,e.user.displayName=e.newItem.displayName,t.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.displayName=""})["catch"](function(e){console.log("err:",e)})},e.canceldisplayName=function(){e.usernameForm=!0,e.newItem.displayName=""},e.showPictureForm=function(){console.log("show form"),e.photoForm=!0},e.updatePicture=function(){e.photoForm=!1,console.log("$state.current: ",s.current),e.user.profileImage=e.newItem.profileImage,console.log("$scope.newItem:",e.newItem),t.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.profileImage=""})["catch"](function(e){console.log("err:",e)})},e.cancelPhotoUrl=function(){e.photoForm=!0,e.newItem.photoUrl=""},e.deleteAccount=function(e){console.log(e._id),t.deleteAccount(e._id).then()["catch"](function(e){console.log("err: ",e)})},e.submitMessage=function(){var o={to:e.user,from:r.currentUser._id,fromName:r.currentUser.displayName,text:e.newItem.text,createdAt:"add moment"};console.log("post obj:",o),l.addWallPost(o).then(function(e){console.log("wallpost:",e),t.addWallPostToUser(n._id,e._id)}).then(s.go(s.$current,null,{reload:!0}))["catch"](function(e){console.log("err: ",e)})}}]);var app=angular.module("myApp");app.controller("registerCtrl",["$scope","$state","$auth",function(e,o,n){console.log("registerCtrl!"),e.register=function(){e.user.password!==e.user.password2?(e.user.password=null,e.user.password2=null,alert("Passwords must match!")):n.signup(e.user).then(function(e){console.log("res: ",e),o.go("login")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("showbusinessCtrl",["$scope","$stateParams","Business",function(e,o,n){console.log("showbusinessCtrl!");var s=o;console.log("businessId",s.businessId),n.searchYelp(s.businessId).then(function(o){console.log("res:",o),e.business=o})["catch"](function(e){console.log("err in businessCtrl: ",e)})}]);var app=angular.module("myApp");app.controller("usersCtrl",["$scope","$$state","$state","User",function(e,o,n,s){console.log("usersCtrl!");var t=s.getAll();console.log("userPromise:",t),t.then(function(o){console.log(o.data),e.userFeed=o.data})}]);var app=angular.module("myApp");app.service("Business",["$http","$q",function(e,o){this.searchYelp=function(n){return console.log("search: ",n),e.get("/api/businesses/yelp/"+n).then(function(e){return console.log("res.data in services:",e.data),console.log("res in services:",e),o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.addFavorite=function(n,s){return console.log("businessObj:",n),e.post("/api/businesses/"+s,n).then(function(e){return console.log("res ln 24 business services:",e),o.resolve(e)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("image",["$http","$q",function(e,o){this.getAll=function(){return e.get("/api/cruds")},this.getById=function(o){return e.get("/api/cruds/"+o)},this.addCrud=function(n){return e.post("/api/cruds",n).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.deleteCrud=function(n){return e["delete"]("/api/cruds/"+n).then(function(){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.updateCrud=function(n,s){return e.put("/api/cruds/"+n,s).then(function(e){return o.resolve(s)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(e,o){this.profile=function(){return e.get("/api/users/profile").then(function(e){return o.resolve(e.data)})},this.getProfile=function(n){return e.get("/api/users/profile/"+n).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getAll=function(){return e.get("/api/users")},this.updateProfile=function(n,s){return console.log("here"),console.log(n," ",s),e.put("/api/users/profile/"+n,s).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.deleteAccount=function(n){return e["delete"]("/api/users/profile/"+n).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.addFavoriteToUser=function(n,s){return e.put("/api/users/profile/"+n+"/add/"+s).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.removeFavoritefromUser=function(n,s){return console.log("remove Favorite","id:",n,"yelpId",s),e.put("/api/users/profile/"+n+"/remove/"+s).then(function(e){return console.log("res ln 53:",e),o.resolve()})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("WallPost",["$http","$q",function(e,o){this.addWallPost=function(n){return console.log("in add wallpost: ",n),e.post("/api/wallposts",n).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getWallPosts=function(n){return e.get("/api/wallposts/"+n).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err: ",e)})}}]);
//# sourceMappingURL=data:application/json;base64,
