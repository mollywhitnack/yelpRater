"use strict";var app=angular.module("myApp",["ui.router","satellizer","ngFileUpload"]);app.config(["$authProvider",function(e){e.loginUrl="api/users/login",e.signupUrl="api/users/signup",e.facebook({clientId:"255060128209165",url:"/api/users/facebook"})}]),app.config(["$stateProvider","$urlRouterProvider",function(e,o){e.state("home",{url:"/",templateUrl:"/html/home.html"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl"}).state("register",{url:"/register",templateUrl:"/html/register.html",controller:"registerCtrl"}).state("profile",{url:"/profile/:userId",templateUrl:"/html/profile.html",controller:"profileCtrl",resolve:{Profile:["User",function(e){return e.profile()}],ProfileByID:["User","$stateParams",function(e,o){return e.getProfile(o.userId)}]}}).state("users",{url:"/users",templateUrl:"/html/users.html",controller:"usersCtrl"}).state("business",{url:"/business",templateUrl:"/html/business.html",controller:"businessCtrl",resolve:{Profile:["User",function(e){return e.profile()}]}}).state("showBusiness",{url:"/business/:businessId",templateUrl:"html/showbusiness.html",controller:"showbusinessCtrl"}),o.otherwise("/")}]);var app=angular.module("myApp");app.controller("businessCtrl",["$scope","User","$rootScope","Business","Profile",function(e,o,s,n,t){console.log("businessCtrl"),e.businesses=[],console.log("Profile:",t);var r=t.favorites;e.searchBusiness=function(){console.log("$scope.newItem.searchParams",e.newItem.searchParams),n.searchYelp(e.newItem.searchParams).then(function(o){console.log("res from search businsess:",o);for(var s=0;s<r.length;s++)console.log(o.id," vs ",r[s]),o.id===r[s]&&(e.toggleFave=!0);e.businesses.push(o)})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.searchBusiness2=function(){console.log("search");var o={};e.newItem.location&&(o.location=e.newItem.location),e.newItem.term&&(o.term=e.newItem.term),console.log("searchBy:",o),n.searchCatagories(o).then(function(o){console.log("res from search businsess:",o);for(var s=0;s<r.length;s++)console.log(o.id," vs ",r[s]),o.id===r[s]&&(e.toggleFave=!0);e.businesses.push(o)})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.favorite=function(s){e.toggleFave=!e.toggleFave,console.log("$scope.businesses[index].id",e.businesses[s].id),o.addFavoriteToUser(t._id,e.businesses[s].id).then(n.addFavorite(e.businesses[s],t._id)).then(function(e){console.log("res:",e)})["catch"](function(e){console.log("err in businessCtrl: ",e)}),console.log("$scope.businesses[index]:",e.businesses[s].id)},e.unFavorite=function(s){e.toggleFave=!e.toggleFave,console.log("$scope.businesses[index].id",e.businesses[s].id),o.removeFavoritefromUser(t._id,e.businesses[s].id).then(function(e){console.log("res:",e)})["catch"](function(e){console.log("err in businessCtrl: ",e)}),console.log("$scope.businesses[index]:",e.businesses[s].id)}}]);var app=angular.module("myApp");app.controller("imageCtrl",["$scope","Upload","Profile","$rootScope",function(e,o,s,n){console.log("image ctrl"),n.currentUser=s,e.submit=function(){console.log("submit"),console.log("$scope.file:",e.file),o.upload({url:"/api/images",data:{photo:e.file,user:n.currentUser._id}}).then(function(o){console.log("res: ",o),e.savedImage=o.data})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("loginCtrl",["$scope","$state","$auth","$rootScope",function(e,o,s,n){console.log("loginCtrl!"),e.login=function(){s.login(e.user).then(function(e){console.log("res: ",e),o.go("profile")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$state","$auth","$rootScope",function(e,o,s,n){console.log("mainCtrl!"),n.currentUser,e.isAuthenticated=function(){return s.isAuthenticated()},e.logout=function(){s.logout(),o.go("home")},e.authenticate=function(e){s.authenticate(e).then(function(e){o.go("home")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("profileCtrl",["$scope","Profile","ProfileByID","$state","User","$rootScope","WallPost",function(e,o,s,n,t,r,l){console.log("profileCtrl!"),r.currentUser=o,e.user=s||o,l.getWallPosts(e.user._id).then(function(o){e.userWallposts=o}),console.log("user:",e.user),console.log("curruser:",r.currentUser),e.showdisplayNameForm=function(){console.log("show form"),e.displayNameForm=!0},e.updatedisplayName=function(){e.displayNameForm=!1,e.user.displayName=e.newItem.displayName,t.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.displayName=""})["catch"](function(e){console.log("err:",e)})},e.canceldisplayName=function(){e.usernameForm=!0,e.newItem.displayName=""},e.showPictureForm=function(){console.log("show form"),e.photoForm=!0},e.updatePicture=function(){e.photoForm=!1,console.log("$state.current: ",n.current),e.user.profileImage=e.newItem.profileImage,console.log("$scope.newItem:",e.newItem),t.updateProfile(e.user._id,e.newItem).then(function(o){console.log("profile:",o),e.newItem.profileImage=""})["catch"](function(e){console.log("err:",e)})},e.cancelPhotoUrl=function(){e.photoForm=!0,e.newItem.photoUrl=""},e.deleteAccount=function(e){console.log(e._id),t.deleteAccount(e._id).then()["catch"](function(e){console.log("err: ",e)})},e.submitMessage=function(){var o={to:e.user,from:r.currentUser._id,fromName:r.currentUser.displayName,text:e.newItem.text,createdAt:"add moment"};console.log("post obj:",o),l.addWallPost(o).then(function(e){console.log("wallpost:",e),t.addWallPostToUser(s._id,e._id)}).then(n.go(n.$current,null,{reload:!0}))["catch"](function(e){console.log("err: ",e)})}}]);var app=angular.module("myApp");app.controller("registerCtrl",["$scope","$state","$auth",function(e,o,s){console.log("registerCtrl!"),e.register=function(){e.user.password!==e.user.password2?(e.user.password=null,e.user.password2=null,alert("Passwords must match!")):s.signup(e.user).then(function(e){console.log("res: ",e),o.go("login")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("showbusinessCtrl",["$scope","$stateParams","Business",function(e,o,s){console.log("showbusinessCtrl!");var n=o;console.log("businessId",n.businessId),s.searchYelp(n.businessId).then(function(o){console.log("res:",o),e.business=o})["catch"](function(e){console.log("err in businessCtrl: ",e)})}]);var app=angular.module("myApp");app.controller("usersCtrl",["$scope","$$state","$state","User",function(e,o,s,n){console.log("usersCtrl!");var t=n.getAll();console.log("userPromise:",t),t.then(function(o){console.log(o.data),e.userFeed=o.data})}]);var app=angular.module("myApp");app.service("Business",["$http","$q",function(e,o){this.searchYelp=function(s){return console.log("search: ",s),e.get("/api/businesses/yelp/"+s).then(function(e){return console.log("res.data in services:",e.data),console.log("res in services:",e),o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.searchCatagories=function(s){return console.log("inputs",s),e.get("/api/businesses/yelpCatagories",s).then(function(e){return console.log("res.data in services:",e.data),console.log("res in services:",e),o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.addFavorite=function(s,n){return console.log("businessObj:",s),e.post("/api/businesses/"+n,s).then(function(e){return console.log("res ln 24 business services:",e),o.resolve(e)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("image",["$http","$q",function(e,o){this.getAll=function(){return e.get("/api/cruds")},this.getById=function(o){return e.get("/api/cruds/"+o)},this.addCrud=function(s){return e.post("/api/cruds",s).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.deleteCrud=function(s){return e["delete"]("/api/cruds/"+s).then(function(){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.updateCrud=function(s,n){return e.put("/api/cruds/"+s,n).then(function(e){return o.resolve(n)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(e,o){this.profile=function(){return e.get("/api/users/profile").then(function(e){return o.resolve(e.data)})},this.getProfile=function(s){return e.get("/api/users/profile/"+s).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getAll=function(){return e.get("/api/users")},this.updateProfile=function(s,n){return console.log("here"),console.log(s," ",n),e.put("/api/users/profile/"+s,n).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.deleteAccount=function(s){return e["delete"]("/api/users/profile/"+s).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.addFavoriteToUser=function(s,n){return e.put("/api/users/profile/"+s+"/add/"+n).then(function(e){return o.resolve()})["catch"](function(e){console.log("err:",e)})},this.removeFavoritefromUser=function(s,n){return console.log("remove Favorite","id:",s,"yelpId",n),e.put("/api/users/profile/"+s+"/remove/"+n).then(function(e){return console.log("res ln 53:",e),o.resolve()})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("WallPost",["$http","$q",function(e,o){this.addWallPost=function(s){return console.log("in add wallpost: ",s),e.post("/api/wallposts",s).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getWallPosts=function(s){return e.get("/api/wallposts/"+s).then(function(e){return o.resolve(e.data)})["catch"](function(e){console.log("err: ",e)})}}]);
//# sourceMappingURL=data:application/json;base64,
